plugins {
    id 'java'
    id 'application'
    id 'net.ltgt.apt' version '0.10'
    id 'io.franzbecker.gradle-lombok' version '1.8'
}

apply plugin: 'java'

mainClassName = 'at.tugraz.igi.main.Main'
// mainClassName = 'at.tugraz.igi.main.SingleRun'

repositories {
    jcenter()
    mavenCentral()
    flatDir
    {
      dirs 'lib'
    }
}

dependencies {
    compile fileTree(dir: 'lib', include: '*.jar')
    compile group: 'com.codepoetics', name: 'protonpack', version: '1.+'
    // compile group: 'org.jooq', name: 'jool', version: '0.9.+'
    // compile group: 'io.github.amaembo', name: 'streamex', version: '0.0.7'
    // compile group: 'io.vavr', name: 'vavr', version: '0.9.0'
    compile group: 'org.tukaani', name: 'xz', version: '1.+'
    compile group: 'org.tallison', name: 'jmatio', version: '1.2'
    compile group: 'org.jfree', name: 'jfreesvg', version: '3.2'
    testCompile 'junit:junit:4.+'
    apt "org.projectlombok:lombok:1.+"
    // compile group: 'org.projectlombok', name: 'lombok', version: '1.16.10'
    compileOnly 'org.projectlombok:lombok:1.+'
    //compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.+'
}

import io.franzbecker.gradle.lombok.task.DelombokTask

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, "-d", outputDir)
    }
}

task delombokHelp(type: DelombokTask) {
    args "--help"
}

javadoc {
    dependsOn delombok
    source = delombok.outputDir
    failOnError = false
}

compileJava {
  options.compilerArgs << "-Xlint" // << "-Werror" // "-Xlint:unchecked" << "-Xlint:deprecation"
}

task(runDebug, dependsOn: 'classes', type: JavaExec) {
    main = 'at.tugraz.igi.main.Main'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005"]
}

// Append app args like this: gradle run -PappArgs="['in.txt', 'out.txt', 'out.png']"
// (for SingleRun to be usable via gradle)
run {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}
